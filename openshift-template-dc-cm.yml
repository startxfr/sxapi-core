kind: Template
apiVersion: v1
metadata:
  name: sxapi-template-config
  annotations:
    openshift.io/display-name: SXAPI micro-service application (ConfigMap)
    description: SXAPI micro-service application with configuration embeded into a
      configMap
    iconClass: icon-nodejs
    tags: startx,alpine,nodejs,sxapi-latest
    openshift.io/long-description: This template provides a startx sxapi micro-service
      application. Ready to use in openshift with a simple deployement config, or
      as a s2i builder for building web applications container. For more information
      about using this image, including OpenShift considerations, see https://github.com/startxfr/sxapi-core/blob/master/README.md.
    openshift.io/provider-display-name: STARTX
    openshift.io/documentation-url: https://github.com/startxfr/sxapi-core/blob/master/README.md
    openshift.io/support-url: https://github.com/startxfr/sxapi-core/issues/new
message: Your application ${APP_NAME} have been created in your project. You can use
  openshift console to log into.
labels:
  template: sxapi-template-config
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: sxapi
    annotations:
      openshift.io/display-name: Startx SXAPI framework (S2I)
      openshift.io/generated-by: STARTX
    labels:
      base-image: sxapi
      app: "${APP_NAME}"
      type: "${APP_TYPE}"
      provider: startx
      template: sxapi-template-config
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: S2I Startx SXAPI framework (latest)
        description: Builder for Simple and eXtensible API framework based on alpine
          (latest)
        iconClass: icon-nodejs
        tags: builder,startx,alpine,nodejs,sxapi-latest
        supports: sxapi:latest,nodejs,http
        version: latest
        sampleRepo: https://github.com/startxfr/sxapi-example.git
      from:
        kind: DockerImage
        name: startx/sxapi:latest
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APP_NAME}-config"
    creationTimestamp: 
    labels:
      app: "${APP_NAME}"
      type: "${APP_TYPE}"
      provider: startx
      template: sxapi-template-config
    annotations:
      openshift.io/generated-by: STARTX
  data:
    sxapi.yml: |
      name: sxapi-example
      description: sxapi example
      version: 0.0.1
      debug: true
      resources:
        serviceinfo-sample:
          _class: serviceinfo
      log:
        filters:
          level: '0,1,2,3,4'
          type: debug,info,error,warn
      server:
        port: '8080'
        endpoints:
        - path: "/"
          desc: Display welcome message (HTML)
          body: "<html><head><title>API Example</title></head><body><h1>This is your API</h1><p>This
            API is based on sxapi-core v0.1.10</p></body></html>"
        - path: "/health"
          resource: serviceinfo-sample
          endpoint: health
        - path: "/info"
          resource: serviceinfo-sample
          endpoint: info
        - path: "/ping"
          desc: Ping the application. Return a sample message in json
          code: '200'
          body: pong
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APP_NAME}"
    generation: 2
    creationTimestamp: 
    labels:
      app: "${APP_NAME}"
      type: "${APP_TYPE}"
      provider: startx
      template: sxapi-template-config
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 60
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APP_NAME}"
        from:
          kind: ImageStreamTag
          name: sxapi:latest
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      app: "${APP_NAME}"
      deploymentconfig: "${APP_NAME}"
    template:
      metadata:
        creationTimestamp: 
        labels:
          app: "${APP_NAME}"
          type: "${APP_TYPE}"
          provider: startx
          template: sxapi-template-config
          deploymentconfig: "${APP_NAME}"
        annotations:
          openshift.io/generated-by: STARTX
      spec:
        volumes:
        - name: volume-${APP_NAME}-conf
          configMap:
            name: "${APP_NAME}-config"
            items:
            - key: sxapi.yml
              path: sxapi.yml
        containers:
        - name: sxapi
          image: startx/sxapi@sha256:5f84957207f29ba96432563f405a004099e0615f20ae64352645b44fed9c71d9
          command:
          - npm
          - start
          ports:
          - containerPort: 8080
            protocol: TCP
          resources: {}
          volumeMounts:
          - name: volume-${APP_NAME}-conf
            mountPath: "/conf"
          livenessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 2
            timeoutSeconds: 2
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
  status:
    observedGeneration: 2
    replicas: 1
    updatedReplicas: 1
    availableReplicas: 1
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APP_NAME}"
    creationTimestamp: 
    labels:
      app: "${APP_NAME}"
      type: "${APP_TYPE}"
      provider: startx
      template: sxapi-template-config
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
    selector:
      app: "${APP_NAME}"
      deploymentconfig: "${APP_NAME}"
    type: ClusterIP
    sessionAffinity: None
  status:
    loadBalancer: {}
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APP_NAME}"
    creationTimestamp: 
    labels:
      app: "${APP_NAME}"
      type: "${APP_TYPE}"
      provider: startx
      template: sxapi-template-config
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    to:
      kind: Service
      name: "${APP_NAME}"
      weight: 100
    port:
      targetPort: 8080-tcp
  status:
    ingress:
    - routerName: router
      conditions:
      - type: Admitted
        status: 'True'
parameters:
- name: APP_NAME
  displayName: Application name
  description: The name of the created application
  value: app
  required: true
- name: APP_TYPE
  displayName: Application type
  description: The type of the created application
  value: application
app:
  build: .
  container_name: "sxapi-core-master"
  ports:
    - "8080:8080"
  volumes:
  - "./sxapi.yml:/conf/sxapi.yml:z"
  - "./test:/test:z"
  working_dir: /usr/src/app
## build application 
#  command: ["npm" , "run" , "build"]
## run application 
#  command: ["npm" , "start"]
## build and start application for dev environement
#  command: ["npm" , "run", "dev"]
## install application for dev environement
#  command: ["npm",  "run", "dev:install"]
## update application depndencies
#  command: ["npm" , "run" , "dev:update"]
## build application for dev environement
#  command: ["npm" , "run" , "dev:build"]
## start application for dev environement
  command: ["npm" , "run" , "dev:start"]
## run application test
#  command: ["npm" , "test"]
## build application for testing
#  command: ["npm" , "run" , "test:build"]
## start application for testing
#  command: ["npm" , "run" , "test:start"]
## build application for production
#  command: ["npm" , "run" , "prod:build"]
## start application for production
#  command: ["npm" , "run" , "prod:start"]
## build and start application for production
#  command: ["npm" , "run" , "prod"]
