apiVersion: v1
kind: Template
metadata:
  name: sxapi-cm-embeded-template
  annotations:
    openshift.io/display-name: SXAPI (embeded configmap)
    description: Template for creating an SXAPI microservice where configuration 
      (embeded in template) is stored in a configMap object
      for more information see https://hub.docker.com/r/startx/sxapi
    iconClass: icon-nodejs
    tags: sxapi,api,nodejs,startx,microservice
    openshift.io/provider-display-name: STARTX
    openshift.io/documentation-url: https://hub.docker.com/r/startx/sxapi
    openshift.io/support-url: https://github.com/startxfr/sxapi-core/issues/new
labels:
  template: sxapi-cm-embeded-template
message: |-
  Your application ${APPLICATION_NAME} will be soon deployed in your project.
  Monitor the deployement for application availability and
  Follow created route to browse your running application

  Application : ${APPLICATION_NAME}
  sxapi       : ${REGISTRY}:${IMAGE_NAME}
  config      : configmap ${APPLICATION_NAME} (yaml)
  Pods        : ${REPLICAS_DATA} (${MEMORY_LIMIT})
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Application image stream ${APPLICATION_NAME} based on ${REGISTRY} ${IMAGE_NAME}
      openshift.io/generated-by: STARTX
  spec:
    tags:
    - name: ${IMAGE_NAME}
      annotations:
        openshift.io/display-name: SXAPI container image (${REGISTRY} ${IMAGE_NAME})
        description: SXAPI image for the application ${APPLICATION_NAME} based on ${REGISTRY} ${IMAGE_NAME}
        iconClass: icon-nodejs
        tags: sxapi,api,nodejs,startx,microservice,${APPLICATION_NAME},${REGISTRY}:${IMAGE_NAME}
      from:
        kind: DockerImage
        name: ${REGISTRY}:${IMAGE_NAME}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Sxapi configuration ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  data:
    sxapi.yml: |
      name: sxapi-default
      description: sxapi default microservice API
      version: 0.0.1
      debug: "true"
      session:
        duration: 3600
        auto_create: true
        transport:
          type: cookie
          cookie_name: sxapi-sess
        backend:
          type: memory
          sid_field: token_sess
          fields:
            stop: datefin_sess
      resources:
        serviceinfo-sample:
          _class: serviceinfo
        websocket-sample:
          _class: websocket-client
          host: http://localhost:8077
      log:
        filters:
          level: '0,1,2,3,4,5'
          type: "debug,info,error,warn"
      server:
        port: '8077'
        static:
        - path: "/test"
          dir: "/test"
        enableWebsockets: true
        websockets:
          events:
          - event: test
            handler: "$ws.websockets.onMessageDefaultCallback"
          - event: disconnect
            handler: "$ws.websockets.onMessageDefaultCallback"
        endpoints:
        - path: "/"
          desc: Display welcome message (HTML)
          body:
          - "<html>"
          - "<head><title>Application ${APPLICATION_NAME}</title></head>"
          - <link rel="stylesheet" href="https://goo.gl/4kFNLH">
          - <body><div class="container">
          - <h1><span class="glyphicon glyphicon-eye-open"></span> Your API ${APPLICATION_NAME} is
            live !</h1>
          - "<p>Default config file must be changed and replaced your <b>own sxapi.yml</b>
            config file."
          - You will then be able to build your own API resources and endpoints.<br>
          - For more informations please visit <a href="https://github.com/startxfr/sxapi-core"
            target="">sxapi project documentation</a>.</p>
          - <nav class="navbar navbar-default navbar-fixed-bottom"><div class="container">
            Microservice engine is <b>${REGISTRY} v${IMAGE_NAME}</b></div></nav>
          - "</div></body>"
          - "</html>"
        - path: "/health"
          resource: serviceinfo-sample
          endpoint: health
        - path: "/info"
          resource: serviceinfo-sample
          endpoint: info
        - path: "/ping"
          desc: Ping the application. Return a sample message in json
          code: '200'
          body: pong
        - path: "/function"
          desc: Ping the application. Return a sample message in json
          handler: "$ws.dynamicRequestHandlerTest"
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Deployement ${APPLICATION_NAME} application
      openshift.io/generated-by: STARTX
  spec:
    replicas: 2
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 60
        maxUnavailable: 25%
        maxSurge: 25%
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:${IMAGE_NAME}"
    - type: ConfigChange
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
        annotations:
          openshift.io/generated-by: STARTX
      spec:
        terminationGracePeriodSeconds: 5
        containers:
        - name: "${APPLICATION_NAME}"
          image: " "
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 2
            tcpSocket:
              port: 8077
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            initialDelaySeconds: 2
            tcpSocket:
              port: 8077
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          env:
          - name: SX_VERBOSE
            value: 'true'
          lifecycle:
            preStop:
              exec:
                command:
                - "npm"
                - stop
          ports:
          - name: sxapi
            containerPort: 8077
          resources:
            requests:
              cpu: 200m
              memory: "${MEMORY_LIMIT}"
            limits:
              cpu: 2000m
              memory: "${MEMORY_LIMIT}"
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
          - mountPath: "/conf"
            name: conf
        restartPolicy: Always
        volumes:
          - name: conf
            configMap:
              name: "${APPLICATION_NAME}"
              items:
              - key: sxapi.yml
                path: sxapi.yml
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Service ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  spec:
    clusterIP: None
    ports:
    - name: sxapi
      port: 8077
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Route ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  spec:
    port:
      targetPort: sxapi
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    wildcardPolicy: None
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  description: The name of the application.
  value: sxapi-demo
  required: true
- name: IMAGE_NAME
  value: 0.3.11
  required: true
- name: REGISTRY
  value: "startx/sxapi"
  required: true
- name: REPLICAS_DATA
  displayName: Desired Pod count for data nodes
  description: How many data nodes should be provisioned? This value can be changed
    later, by scaling up/down.
  value: '2'
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit for data nodes
  description: Maximum amount of memory data container can use.
  value: 128Mi