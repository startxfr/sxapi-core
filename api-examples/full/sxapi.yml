name: sxapi-dev-full
description: sxapi full microservice API ({{{NODE_ENV}}}). You can find out more at http://startx.fr/api
termsOfService: see more at http://startx.fr/api#termOfService
contactName: Dev STARTX
contactMail: dev@startx.fr
licence: GPL v2.0
version: 0.0.1
debug: true
session:
  duration: 3600
  auto_create: true
  transport:
    type: token
  backend:
    type: redis
    resource: redis-sample
    sid_field: sid
  auth:
    default: anonymous
    auth_field: auth_info
    auth_field_serializer: json
    providers:
    - name: "sql-user"
      type: user
      backend: mysql
      resource: mysql-sample
      table_name: user
      id_field: id_user
      login_field: login_user
      password_field: password_user
      password_algorithm: md5
    - name: "sql-sa"
      type: sa
      backend: mysql
      resource: mysql-sample
      table_name: servicesaccount
      id_field: id_sa
      name_field: name_sa
      token_field: token_sa
    - name: "anonymous"
      type: anonymous
resources:
  s3-sample:
    _class: aws_s3
    listObjects_options: {}
    getObject_options: {}
    addObject_options: {}
    updateObject_options: {}
    deleteObject_options: {}
    ACCESS_ID: AKIAJ7JDWBNTZOXZRM6A
    ACCESS_KEY: VQwNHhw/vAVbxDn9vRqC1KQUngz+DXolCnfpgkAl
    SESSION_TOKEN: ''
    region: eu-west-1
    Bucket: sxapiexample
  sqs-sample:
    _class: aws_sqs
    read_options:
      MaxNumberOfMessages: 10
      VisibilityTimeout: 10
      WaitTimeSeconds: 0
    delete_options: {}
    send_options:
      DelaySeconds: 10
      MessageAttributes:
        from:
          DataType: String
          StringValue: sxapi-core-dev
    QueueUrl: https://sqs.eu-west-1.amazonaws.com/791728029433/example
    ACCESS_ID: AKIAJ7JDWBNTZOXZRM6A
    ACCESS_KEY: VQwNHhw/vAVbxDn9vRqC1KQUngz+DXolCnfpgkAl
    SESSION_TOKEN: ''
    region: eu-west-1
  couchbase-sample:
    _class: serviceinfo
    cluster: http://db-couchbase:8091
    bucket: sxapicore_example
  serviceinfo-sample:
    _class: serviceinfo
  swagger-sample:
    _class: swagger
  insee-sample:
    _class: insee
    siren2tva:
      longCode: true
  redis-sample:
    _class: redis
    url: redis://db-redis
  http-sample:
    _class: http
    url: https://adobe.github.io/Spry/data/json/array-02.js
  mysql-sample:
    _class: mysql
    server:
      host: db-mariadb
      port: '3306'
      user: sxapicore_example
      password: sxapicore_example
      database: sxapicore_example
  files-sample:
    _class: localfs
    directory: "/usr/src/app/"
  twitter-sample:
    _class: twitter
    QueueUrl: https://sqs.eu-west-1.amazonaws.com/11111111111111111/my-queue
    ACCESS_ID: XXXXXXXXXXXXXXXXXXXX
    ACCESS_KEY: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
log:
  filters:
    level: '0,1,2,3,4,5'
    type: debug,info,error,warn
notifications:
  default-sqs:
    type: sqs
    resource: sqs-sample
  marketing-sqs:
    type: sqs
    resource: sqs-sample
server:
  endpoints:
  - path: "/"
    desc: Display welcome message (HTML)
    header:
      Content-Type: text/html
    body: "<html><head></head><body><h1>SXAPI - Full dev - v0.0.1</h1></body></html>"
  - path: "/health"
    resource: serviceinfo-sample
    endpoint: health
    notification:
      pipeline: default-sqs
      event: health:get
  - path: "/swagger"
    resource: swagger-sample
    endpoint: manifest
  - path: "/ping"
    desc: Ping the application. Return a sample message in json
    code: '200'
    body: pong
  - path: "/html"
    body: "<html><head></head><body><h1>Static html content</h1></body></html>"
  - path: "/dir"
    directory: docs/
  - path: "/txt"
    code: '201'
    header:
      Content-Type: text/plain
    body: text response
  - path: "/json"
    code: '200'
    header:
      Content-Type: application/json
    body: '{"key":"value"}'
  - path: "/restricted"
    method: ROUTER
    auth: ["sql-user", "sql-sa"]
    endpoints:
    - path: "/restricted"
      method: GET
      body: "<html><head></head><body><h1>Restricted area</h1></body></html>"
    - path: "/restricted/user"
      method: GET
      auth: ["sql-user"]
      body: "<html><head></head><body><h1>Restricted area (only user)</h1></body></html>"
    - path: "/restricted/sa"
      method: GET
      auth: ["sql-sa"]
      body: "<html><head></head><body><h1>Restricted area (only SA)</h1></body></html>"
    - path: "/restricted/unrestricted"
      method: GET
      auth: ["anonymous"]
      body: "<html><head></head><body><h1>Unrestricted area (into a restricted area)</h1></body></html>"
  - path: "/function"
    handler: "$ws.dynamicRequestHandlerTest"
    param_sample: value de param_sample
  - path: "/http"
    resource: http-sample
    endpoint: call
    url: https://adobe.github.io/Spry/data/json/object-01.js
  - path: "/message"
    method: ROUTER
    resource: sqs-sample
    endpoints:
    - path: "/message/queue"
      method: GET
      endpoint: listQueue
      config: {}
    - path: "/message/queue/:id"
      method: POST
      endpoint: addQueue
      config: {}
    - path: "/message/queue/:id"
      method: DELETE
      endpoint: deleteQueue
      queueUrlPrefix: https://sqs.eu-west-1.amazonaws.com/791728029433/
      config: {}
    - path: "/message"
      method: GET
      endpoint: listMessages
      config:
        QueueUrl: https://sqs.eu-west-1.amazonaws.com/791728029433/example
    - path: "/message"
      method: POST
      endpoint: addMessage
    - path: "/message"
      method: DELETE
      endpoint: deleteMessage
      config:
        QueueUrl: https://sqs.eu-west-1.amazonaws.com/791728029433/example
  - path: "/s3store"
    method: ROUTER
    resource: s3-sample
    endpoints:
    - path: "/s3store"
      method: GET
      endpoint: listObjects
      Bucket: sxapiexample
    - path: "/s3store/:id"
      method: GET
      endpoint: getObject
      bucket: sxapiexample
    - path: "/s3store/:id"
      method: POST
      endpoint: addObject
      bucket: sxapiexample
    - path: "/s3store/:bid/:id"
      method: GET
      endpoint: getObject
    - path: "/s3store/:bid/:id"
      method: POST
      endpoint: addObject
    - path: "/s3store"
      method: DELETE
      endpoint: deleteObject
    - path: "/s3store-bucket"
      method: GET
      endpoint: listBuckets
      config: {}
    - path: "/s3store-bucket/:id"
      method: POST
      endpoint: addBucket
      config: {}
    - path: "/s3store-bucket/:id"
      method: GET
      endpoint: infoBucket
      config: {}
    - path: "/s3store-bucket/:id"
      method: DELETE
      endpoint: deleteBucket
      config: {}
  - path: "/redis"
    method: ROUTER
    resource: redis-sample
    endpoints:
    - path: "/redis"
      method: POST
      endpoint: create
    - path: "/redis/:id"
      method: POST
      endpoint: create
    - path: "/redis/:id"
      method: GET
      endpoint: get
    - path: "/redis/:id"
      method: PUT
      endpoint: update
    - path: "/redis/:id"
      method: DELETE
      endpoint: delete
  - path: "/file"
    method: ROUTER
    resource: files-sample
    endpoints:
    - path: "/file"
      method: GET
      endpoint: list
    - path: "/file/:id"
      method: POST
      endpoint: create
    - path: "/file/:id"
      method: GET
      endpoint: read
    - path: "/file/:id"
      method: PUT
      endpoint: update
    - path: "/file/:id"
      method: DELETE
      endpoint: delete
  - path: "/mysql"
    method: ROUTER
    resource: mysql-sample
    table: example
    id_field: id
    endpoints:
    - path: "/mysql"
      method: GET
      endpoint: list
      sql: SELECT * FROM example LIMIT 200
    - path: "/mysql/:id"
      method: POST
      endpoint: create
    - path: "/mysql/:id"
      method: GET
      endpoint: readOne
      sql: "SELECT * FROM example WHERE id = '{{id}}' LIMIT 1"
    - path: "/mysql/:id"
      method: PUT
      endpoint: update
    - path: "/mysql/:id"
      method: DELETE
      endpoint: delete