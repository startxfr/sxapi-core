kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: sxapi-example-full-template
  annotations:
    openshift.io/display-name: SXAPI full example application (embeded configmap)
    description: Template for creating a full SXAPI example where configuration 
      (embeded in template) is stored in a configMap object
      for more information see https://hub.docker.com/r/startx/sxapi
    iconClass: icon-nodejs
    tags: sxapi,api,nodejs,startx,microservice
    openshift.io/provider-display-name: STARTX
    openshift.io/documentation-url: https://hub.docker.com/r/startx/sxapi
    openshift.io/support-url: https://github.com/startxfr/sxapi-core/issues/new
labels:
  template: sxapi-example-full-template
  provider: startx
  technology: sxapi
message: |-
  Your application ${APPLICATION_NAME} will be soon deployed in your project.
  Monitor the deployement for application availability

  Application : ${APPLICATION_NAME}
  sxapi       : ${IMAGE_NAME}:${IMAGE_VERSION}
  config      : configmap ${APPLICATION_NAME} (yaml)
  Pods        : ${REPLICAS_DATA} (${MEMORY_LIMIT})
  service     : ${APPLICATION_NAME} -> 8077
objects:
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Application image stream ${APPLICATION_NAME} based on ${IMAGE_NAME} ${IMAGE_VERSION}
      openshift.io/generated-by: STARTX
  spec:
    tags:
    - name: ${IMAGE_VERSION}
      annotations:
        openshift.io/display-name: SXAPI container image (${IMAGE_NAME} ${IMAGE_VERSION})
        description: SXAPI image for the application ${APPLICATION_NAME} based on ${IMAGE_NAME} ${IMAGE_VERSION}
        iconClass: icon-nodejs
        tags: sxapi,api,nodejs,startx,microservice,${APPLICATION_NAME},${IMAGE_NAME}:${IMAGE_VERSION}
      from:
        kind: DockerImage
        name: ${IMAGE_NAME}:${IMAGE_VERSION}
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Sxapi configuration ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  data:
    sxapi.yml: |
      name: sxapi-dev-full
      description: sxapi full microservice API ({{{NODE_ENV}}}). You can find out more at http://startx.fr/api
      termsOfService: http://startx.fr/api#termOfService
      contactName: Dev STARTX
      contactMail: dev@startx.fr
      licence: GPL v2.0
      version: 0.0.1
      debug: "{{{SX_DEBUG}}}"
      session:
        duration: 3600
        auto_create: true
        transport:
          type: token
        backend:
          type: redis
          resource: redis-sample
          sid_field: sid
        auth:
          default: anonymous
          auth_field: auth_info
          auth_field_serializer: json
          providers:
          - name: "sql-user"
            type: user
            backend: mysql
            resource: mysql-sample
            table_name: user
            id_field: id_user
            login_field: login_user
            password_field: password_user
            password_algorithm: md5
          - name: "sql-sa"
            type: sa
            backend: mysql
            resource: mysql-sample
            table_name: servicesaccount
            id_field: id_sa
            name_field: name_sa
            token_field: token_sa
          - name: "anonymous"
            type: anonymous
      resources:
        s3-sample:
          _class: aws_s3
          listObjects_options: {}
          getObject_options: {}
          addObject_options: {}
          updateObject_options: {}
          deleteObject_options: {}
          ACCESS_ID: XXXXXXXXXXXXX
          ACCESS_KEY: XXXXXXXXXXXXX
          SESSION_TOKEN: ''
          region: eu-west-3
          Bucket: sxapiexample
        sqs-sample:
          _class: aws_sqs
          read_options:
            MaxNumberOfMessages: 10
            VisibilityTimeout: 10
            WaitTimeSeconds: 0
          delete_options: {}
          send_options:
            DelaySeconds: 10
            MessageAttributes:
              from:
                DataType: String
                StringValue: sxapi-core-dev
          QueueUrl: https://sqs.eu-west-3.amazonaws.com/791728029433/example
          ACCESS_ID: XXXXXXXXXXXXX
          ACCESS_KEY: XXXXXXXXXXXXX
          SESSION_TOKEN: ''
          region: eu-west-3
        couchbase-sample:
          _class: couchbase
          cluster: http://db-couchbase:8091
          bucket: sxapicore_example
        serviceinfo-sample:
          _class: serviceinfo
        swagger-sample:
          _class: swagger
        insee-sample:
          _class: insee
          siren2tva:
            longCode: true
        redis-sample:
          _class: redis
          url: redis://db-redis
        http-sample:
          _class: http
          url: https://adobe.github.io/Spry/data/json/array-02.js
        mysql-sample:
          _class: mysql
          server:
            host: db-mariadb
            port: '3306'
            user: sxapicore_example
            password: sxapicore_example
            database: sxapicore_example
        files-sample:
          _class: localfs
          directory: "/app/"
        twitter-sample:
          _class: twitter
          QueueUrl: https://sqs.eu-west-3.amazonaws.com/11111111111111111/my-queue
          ACCESS_ID: XXXXXXXXXXXXX
          ACCESS_KEY: XXXXXXXXXXXXX
      log:
        filters:
          level: '0,1,2,3,4,5'
          type: "{{#SX_DEBUG}}debug,{{/SX_DEBUG}}info,error,warn"
      notifications:
        default-sqs:
          type: sqs
          resource: sqs-sample
        marketing-sqs:
          type: sqs
          resource: sqs-sample
      server:
        port: '{{{APP_PORT}}}'
        endpoints:
        - path: "/"
          description: Display welcome message (HTML)
          header:
            Content-Type: text/html
          body: "<html><head></head><body><h1>SXAPI - Full dev - v0.0.1</h1></body></html>"
        - path: "/health"
          description: Return health check for this API instance
          resource: serviceinfo-sample
          endpoint: health
          notification:
            pipeline: default-sqs
            event: health:get
        - path: "/swagger"
          resource: swagger-sample
          description: Return a swagger manifest for this API
          endpoint: manifest
        - path: "/ping"
          description: Ping the application. Return a sample message in json
          code: '200'
          body: pong
        - path: "/html"
          description: Static HTML content
          body: "<html><head></head><body><h1>Static html content</h1></body></html>"
        - path: "/dir"
          directory: docs/
        - path: "/txt"
          code: '201'
          header:
            Content-Type: text/plain
          body: text response
        - path: "/json"
          description: Static JSON content
          code: '200'
          header:
            Content-Type: application/json
          body: '{"key":"value"}'
        - path: "/restricted"
          method: ROUTER
          auth: ["sql-user", "sql-sa"]
          endpoints:
          - path: "/restricted"
            description: Restricted area example
            method: GET
            body: "<html><head></head><body><h1>Restricted area</h1></body></html>"
          - path: "/restricted/user"
            description: Restricted only user example
            method: GET
            auth: ["sql-user"]
            body: "<html><head></head><body><h1>Restricted area (only user)</h1></body></html>"
          - path: "/restricted/sa"
            description: Restricted area serviceAccount example
            method: GET
            auth: ["sql-sa"]
            body: "<html><head></head><body><h1>Restricted area (only SA)</h1></body></html>"
          - path: "/restricted/unrestricted"
            description: Restricted area wuth unresigtered example
            method: GET
            auth: ["anonymous"]
            body: "<html><head></head><body><h1>Unrestricted area (into a restricted area)</h1></body></html>"
        - path: "/function"
          description: Restricted area example
          handler: "$ws.dynamicRequestHandlerTest"
          param_sample: value de param_sample
        - path: "/http"
          resource: http-sample
          endpoint: call
          url: https://adobe.github.io/Spry/data/json/object-01.js
        - path: "/message"
          method: ROUTER
          resource: sqs-sample
          endpoints:
          - path: "/message/queue"
            method: GET
            endpoint: listQueue
            config: {}
          - path: "/message/queue/:id"
            method: POST
            endpoint: addQueue
            config: {}
          - path: "/message/queue/:id"
            method: DELETE
            endpoint: deleteQueue
            queueUrlPrefix: https://sqs.eu-west-3.amazonaws.com/791728029433/
            config: {}
          - path: "/message"
            method: GET
            endpoint: listMessages
            config:
              QueueUrl: https://sqs.eu-west-3.amazonaws.com/791728029433/example
          - path: "/message"
            method: POST
            endpoint: addMessage
          - path: "/message"
            method: DELETE
            endpoint: deleteMessage
            config:
              QueueUrl: https://sqs.eu-west-3.amazonaws.com/791728029433/example
        - path: "/s3store"
          method: ROUTER
          resource: s3-sample
          endpoints:
          - path: "/s3store"
            method: GET
            endpoint: listObjects
            Bucket: sxapiexample
          - path: "/s3store/:id"
            method: GET
            endpoint: getObject
            bucket: sxapiexample
          - path: "/s3store/:id"
            method: POST
            endpoint: addObject
            bucket: sxapiexample
          - path: "/s3store/:bid/:id"
            method: GET
            endpoint: getObject
          - path: "/s3store/:bid/:id"
            method: POST
            endpoint: addObject
          - path: "/s3store"
            method: DELETE
            endpoint: deleteObject
          - path: "/s3store-bucket"
            method: GET
            endpoint: listBuckets
            config: {}
          - path: "/s3store-bucket/:id"
            method: POST
            endpoint: addBucket
            config: {}
          - path: "/s3store-bucket/:id"
            method: GET
            endpoint: infoBucket
            config: {}
          - path: "/s3store-bucket/:id"
            method: DELETE
            endpoint: deleteBucket
            config: {}
        - path: "/redis"
          method: ROUTER
          resource: redis-sample
          endpoints:
          - path: "/redis"
            method: POST
            endpoint: create
          - path: "/redis/:id"
            method: POST
            endpoint: create
          - path: "/redis/:id"
            method: GET
            endpoint: get
          - path: "/redis/:id"
            method: PUT
            endpoint: update
          - path: "/redis/:id"
            method: DELETE
            endpoint: delete
        - path: "/file"
          method: ROUTER
          resource: files-sample
          endpoints:
          - path: "/file"
            method: GET
            endpoint: list
          - path: "/file/:id"
            method: POST
            endpoint: create
          - path: "/file/:id"
            method: GET
            endpoint: read
          - path: "/file/:id"
            method: PUT
            endpoint: update
          - path: "/file/:id"
            method: DELETE
            endpoint: delete
        - path: "/mysql"
          method: ROUTER
          resource: mysql-sample
          table: example
          id_field: id
          endpoints:
          - path: "/mysql"
            method: GET
            endpoint: list
            sql: SELECT * FROM example LIMIT 200
          - path: "/mysql/:id"
            method: POST
            endpoint: create
          - path: "/mysql/:id"
            method: GET
            endpoint: readOne
            sql: "SELECT * FROM example WHERE id = '{{id}}' LIMIT 1"
          - path: "/mysql/:id"
            method: PUT
            endpoint: update
          - path: "/mysql/:id"
            method: DELETE
            endpoint: delete

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Deployement ${APPLICATION_NAME} application
      openshift.io/generated-by: STARTX
  spec:
    replicas: 2
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 60
        maxUnavailable: 25%
        maxSurge: 25%
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:${IMAGE_VERSION}"
    - type: ConfigChange
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
        annotations:
          openshift.io/generated-by: STARTX
      spec:
        terminationGracePeriodSeconds: 5
        containers:
        - name: "${APPLICATION_NAME}"
          image: " "
          imagePullPolicy: Always
          livenessProbe:
            initialDelaySeconds: 2
            tcpSocket:
              port: 8077
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          readinessProbe:
            initialDelaySeconds: 2
            tcpSocket:
              port: 8077
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            preStart:
              exec:
                command:
                - npm
                - audit
                - fix
            preStop:
              exec:
                command:
                - npm
                - stop
          ports:
          - name: sxapi-http
            containerPort: 8077
          env:
          - name: APP_PORT
            value: '8077'
          resources:
            requests:
              cpu: 200m
              memory: "${MEMORY_LIMIT}"
            limits:
              cpu: 2000m
              memory: "${MEMORY_LIMIT}"
          terminationMessagePath: "/dev/termination-log"
          volumeMounts:
          - mountPath: "/conf"
            name: conf
        restartPolicy: Always
        volumes:
          - name: conf
            configMap:
              name: "${APPLICATION_NAME}"
              items:
              - key: sxapi.yml
                path: sxapi.yml
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Service ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  spec:
    clusterIP: None
    ports:
    - name: sxapi-http
      protocol: TCP
      port: 8077
      targetPort: 8077
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Route ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
  spec:
    port:
      targetPort: sxapi-http
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    wildcardPolicy: None
parameters:
- name: APPLICATION_NAME
  displayName: Application Name
  description: The name of the application.
  value: sxapi-full-example
  required: true
- name: IMAGE_VERSION
  value: "0.3.57"
  required: true
- name: IMAGE_NAME
  value: "startx/sxapi"
  required: true
- name: REPLICAS_DATA
  displayName: Desired Pod count for data nodes
  description: How many data nodes should be provisioned? This value can be changed
    later, by scaling up/down.
  value: '2'
  required: true
- name: MEMORY_LIMIT
  displayName: Memory Limit for data nodes
  description: Maximum amount of memory data container can use.
  value: 128Mi
  