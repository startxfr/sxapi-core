name: sxapi-dev-bot
description: sxapi bot microservice API ({{{NODE_ENV}}}). You can find out more at http://startx.fr/api
termsOfService: http://startx.fr/api#termOfService
contactName: Dev STARTX
contactMail: dev@startx.fr
licence: GPL v2.0
version: 0.0.1
debug: "{{{SX_DEBUG}}}"
session:
  duration: 3600
  auto_create: true
  transport:
    type: cookie
    cookie_name: sxapi-sess
  backend:
    type: memory
    sid_field: token_sess
    fields:
      stop: datefin_sess
resources:
  serviceinfo-sample:
    _class: serviceinfo
  swagger-sample:
    _class: swagger
  sqs-example:
    _class: aws_sqs
    send_options:
      DelaySeconds: 2
      MessageAttributes:
        from:
          DataType: String
          StringValue: startx
    QueueUrl: https://sqs.eu-west-1.amazonaws.com/11111111111111111/my-queue
    ACCESS_ID: XXXXXXXXXXXXXXXXXXXX
    ACCESS_KEY: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    region: eu-west-1
  twitter-example:
    _class: twitter
    consumer_key: XXXXXXXXXXXXXXXXXXXX
    consumer_secret: XXXXXXXXXXXXXXXXXXXX
    access_token_key: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    access_token_secret: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
log:
  filters:
    level: '0,1,2,3,4,5'
    type: "{{#SX_DEBUG}}debug,{{/SX_DEBUG}}info,error,warn"
server:
  port: '{{{APP_PORT}}}'
  endpoints:
  - path: "/"
    description: Display welcome message (HTML)
    body: "<html><head><title>sxapi-core API</title></head><body><h1>Your API is live
      !</h1><p>This API is based on sxapi-core v0.3.5 and use default config file.
      You can now start to configure your sxapi.yml config file in order to build
      your own API </p></body></html>"
  - path: "/health"
    description: Return health check for this API instance
    resource: serviceinfo-sample
    endpoint: health
  - path: "/info"
    description: Return information about this API instance
    resource: serviceinfo-sample
    endpoint: info
  - path: "/swagger"
    resource: swagger-sample
    description: Return a swagger manifest for this API
    endpoint: manifest
  - path: "/ping"
    description: Ping the application. Return a sample message in json
    code: '200'
    body: pong
bot:
  lib: "/usr/src/app/mylib"
  cron:
  - id: example-cront-task
    name: Execute example cron task
    schedule: "*/1 * * * *"
    task: myCronFunction
  readers:
    sqs:
    - resource: sqs-example
      frequency: 5
      config:
        MaxNumberOfMessages: 2
        VisibilityTimeout: 2
      filters:
      - id: example-sqs-task
        event: event:type
        task: myReaderFunction
    twitter:
    - resource: twitter-example
      filters:
      - id: example-twitter-startx
        match: "#paris"
        task: myTwitterFunction
      - id: example-twitter-startx
        match: "#london"
        task: myTwitterFunction
