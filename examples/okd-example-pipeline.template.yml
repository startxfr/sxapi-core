kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: sxapi-example-pipeline-template
  annotations:
    openshift.io/display-name: SXAPI micro-service application (Builder)
    description: SXAPI micro-service application builder based on alpine linux
    iconClass: icon-nodejs
    tags: builder,startx,alpine,nodejs,sxapi-latest
    openshift.io/provider-display-name: STARTX
    openshift.io/documentation-url: https://github.com/startxfr/sxapi-core/blob/master/README.md
    openshift.io/support-url: https://github.com/startxfr/sxapi-core/issues/new
message: Your application ${APPLICATION_NAME} have been created in your project. You can use
  openshift console to monitor it building and deployement status.
message: |-
  Your application ${APPLICATION_NAME} will be soon deployed in your project.
  Monitor the CI/CD pipeline workflow and Follow created route to browse 
  your running application

  Application : ${APPLICATION_NAME}
  sxapi       : ${REGISTRY}:${IMAGE_NAME}
  config      : configmap ${APPLICATION_NAME} (yaml)
  Pods        : ${REPLICAS_DATA} (${MEMORY_LIMIT})
  service     : ${APPLICATION_NAME} -> 8077
labels:
  template: sxapi-example-pipeline-template
  provider: startx
  technology: sxapi
objects:
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-pipeline"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/generated-by: STARTX
      pipeline.alpha.openshift.io/uses: '[{"name": "${NAME}", "namespace": "", "kind":
        "DeploymentConfig"}]'
  spec:
    strategy:
      type: JenkinsPipeline
      jenkinsPipelineStrategy:
        jenkinsfile: 'try { timeout(time: 10, unit: ''MINUTES'') { node(''nodejs'')
          { stage(''build'') { openshiftBuild(buildConfig: ''sxapi'', showBuildLogs:
          ''true'') }; stage(''deploy'') { openshiftDeploy(deploymentConfig: ''sxapi'')
          } } } } catch (err) { echo "in catch block"; echo "Caught: ${err}"; currentBuild.result
          = ''FAILURE''; throw err }   '
    triggers:
    - type: GitHub
      github:
        secret: "${WEBHOOK_TOKEN}_${APPLICATION_NAME}"
    - type: Generic
      generic:
        secret: "${WEBHOOK_TOKEN}_${APPLICATION_NAME}"
    - type: ImageChange
      imageChange: {}
    - type: ConfigChange
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: sxapi
    annotations:
      openshift.io/display-name: Startx SXAPI framework (S2I)
      openshift.io/generated-by: STARTX
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: S2I Startx SXAPI framework (latest)
        description: Builder for Simple and eXtensible API framework based on alpine
          (latest)
        iconClass: icon-nodejs
        tags: builder,startx,alpine,nodejs,sxapi-latest
        supports: sxapi:latest,nodejs,http
        version: latest
        sampleRepo: https://github.com/startxfr/sxapi-example.git
      from:
        kind: DockerImage
        name: startx/sxapi:latest
- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    annotations:
      openshift.io/display-name: Application ${APPLICATION_NAME}
      openshift.io/generated-by: STARTX
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    tags:
    - name: latest
      annotations:
        openshift.io/display-name: Application ${APPLICATION_NAME}
        description: Base image for the application ${APPLICATION_NAME}
        iconClass: icon-nodejs
        tags: startx,alpine,nodejs,sxapi-latest,application,${APPLICATION_NAME}
        supports: sxapi:latest,nodejs,http
        version: latest
- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: sxapi
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    triggers:
    - type: GitHub
      github:
        secret: "${WEBHOOK_TOKEN}_${APPLICATION_NAME}"
    - type: Generic
      generic:
        secret: "${WEBHOOK_TOKEN}_${APPLICATION_NAME}"
    runPolicy: SerialLatestOnly
    source:
      type: Git
      git:
        uri: "${SOURCE_GIT}"
        ref: "${SOURCE_BRANCH}"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: sxapi:latest
        env:
        - name: SX_VERBOSE
          value: 'true'
    output:
      to:
        kind: ImageStreamTag
        name: "${APPLICATION_NAME}:latest"
    resources: {}
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: sxapi
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    strategy:
      type: Rolling
      rollingParams:
        updatePeriodSeconds: 1
        intervalSeconds: 1
        timeoutSeconds: 20
        maxUnavailable: 25%
        maxSurge: 25%
      resources: {}
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - "${APPLICATION_NAME}"
        from:
          kind: ImageStreamTag
          name: "${APPLICATION_NAME}:latest"
    - type: ConfigChange
    replicas: 1
    test: false
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: sxapi
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: sxapi
        annotations:
          openshift.io/generated-by: STARTX
      spec:
        containers:
        - name: "${APPLICATION_NAME}"
          image: " "
          command:
          - npm
          - start
          env:
          - name: APP_PORT
            value: '8077'
          resources: {}
          livenessProbe:
            httpGet:
              path: "/health"
              port: 8077
              scheme: HTTP
            initialDelaySeconds: 4
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: 8077
              scheme: HTTP
            initialDelaySeconds: 4
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: "/dev/termination-log"
          imagePullPolicy: Always
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        dnsPolicy: ClusterFirst
        securityContext: {}
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      service.alpha.openshift.io/dependencies: '[{"name": "${NAME}", "namespace":
        "", "kind": "Service"}]'
      openshift.io/generated-by: STARTX
  spec:
    ports:
    - name: sxapi-http
      protocol: TCP
      port: 8077
      targetPort: 8077
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: sxapi
    type: ClusterIP
    sessionAffinity: None
- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
    annotations:
      openshift.io/generated-by: STARTX
  spec:
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: sxapi-http
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: The name of the created application
  value: app
  required: true
- name: SOURCE_GIT
  displayName: Source repository
  description: URL to the source code to use during build process
  value: https://github.com/startxfr/sxapi-example.git
  required: true
- name: SOURCE_BRANCH
  displayName: Source branch
  description: Name of the default branch
  value: master
  required: true
- name: WEBHOOK_TOKEN
  displayName: Webhook token
  description: Secret token to use for webhook to github or generic
  generate: expression
  from: "[a-zA-Z0-9]{24}"
  required: true
